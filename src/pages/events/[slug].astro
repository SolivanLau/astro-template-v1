---
import type { GetStaticPaths } from "astro";
// scripts
import cmsFetch from "src/assets/scripts/cms/cmsFetch";
import { formatDate, formatTime } from "src/assets/scripts/lib/time";
import { generateGoogleMapsLink } from "src/assets/scripts/lib/googleMaps";
// Layouts
import PageLayout from "@layouts/PageLayout.astro";
import DividerLayout from "@layouts/DividerLayout.astro";
import Newsletter from "@components/Newsletter.astro";
import Header from "@layouts/Header.astro";
import FeaturedGuestsLayout from "@layouts/FeaturedGuestsLayout.astro";
// Components
import Link from "@components/Link.astro";
import { Icon } from "astro-icon/components";
import { Picture } from "astro:assets";
import Title from "@components/Title.astro";
import Video from "@components/Video.astro";
import BlockRenderer from "@components/BlockRenderer.astro";

export const getStaticPaths = (async () => {
    const queryParameters = {
        populate: {
            poster: {
                populate: "*",
            },
            eventType: "*",
            details: {
                populate: "*",
            },
            about: {
                populate: "*",
            },
            program: {
                populate: "*",
            },
            youtubeVideo: {
                populate: "*",
            },
            guests: {
                populate: "*",
            },
            seo: "*",
        },
    };
    const eventPagesQuery = await cmsFetch("events", queryParameters);

    return eventPagesQuery.map((event) => ({
        params: { slug: event.attributes.slug },
        props: event.attributes,
    }));
}) satisfies GetStaticPaths;

interface Props {
    title: string;
    subtitle: string;
    poster: any;
    eventType: "concert" | "video";
    details: any;
    about: any;
    program: any;
    youtubeVideo: any;
    guests: any;
    seo: any;
}

const { title, subtitle, poster, details, eventType, about, program, youtubeVideo, guests, seo } =
    Astro.props;

const mapsLink = generateGoogleMapsLink(details?.location);

const fallbackSeo = {
    metaTitle: `${title} | Toronto Wind Collective`,
    metaDescription:
        eventType === "concert"
            ? `Watch our upcoming live concert, ${title}`
            : `Watch the video premiere of ${title} now!`,
};
---

<PageLayout cmsSeo={seo} fallbackSeo={seo} isTurnstile>
    <main class="event">
        <Header title={title} subtitle={subtitle} />
        <!-- EVENT INFO -->
        <section>
            <div class="event__info wrapper">
                <!-- POSTER -->
                <figure class="event__info__poster">
                    {
                        poster && (
                            <Picture
                                src={poster.data.attributes.url}
                                width={poster.data.attributes.width}
                                height={poster.data.attributes.height}
                                widths={[1296, 600]}
                                sizes="(max-width: 768px) 400px, 1296px"
                                alt={`${title} Poster`}
                                formats={["webp", "png"]}
                                loading="eager"
                            />
                        )
                    }
                </figure>
                <!-- DETAILS -->
                <article class="event__info__text">
                    <!-- DATE AND TIME -->
                    <div class="event__info__text__details">
                        <h2 class="sr-only">Event Details</h2>
                        <ul class="details">
                            <!-- Date -->
                            {
                                details?.date && (
                                    <li class="details__item">
                                        <Icon name="calendar" />
                                        <time>{formatDate(details.date)}</time>
                                    </li>
                                )
                            }
                            <!-- Start and End Time -->
                            {
                                details?.startTime && details?.endTime && (
                                    <li class="details__item">
                                        <Icon name="clock" />
                                        <span>
                                            <time>{formatTime(details.startTime)} </time>
                                            &nbsp;-&nbsp;
                                            <time>{formatTime(details.endTime)} </time>
                                        </span>
                                    </li>
                                )
                            }

                            <!-- Location -->
                            {
                                details?.location && (
                                    <li>
                                        <Link
                                            class="details__item"
                                            url={mapsLink}
                                            type="text--dark-visible"
                                            isLinkExternal
                                        >
                                            <Icon name="location" />
                                            <address>
                                                {details.location.addressLineOne},
                                                {details.location.city}
                                            </address>
                                        </Link>
                                    </li>
                                )
                            }
                        </ul>
                        <Link url="/" type="button--secondary-white" class="cta"> Learn More </Link>
                    </div>

                    <!-- ABOUT -->
                    <div class="event__info__text__about flow">
                        <Title tagName="h2">About</Title>
                        <!-- TEXT TO BE REPLACED BY CMS -->
                        {about && <BlockRenderer html={about} />}
                    </div>
                    <!-- PROGRAM -->
                    <div class="event__info__text__program flow">
                        <Title tagName="h2">Program</Title>
                        <!-- PROGRAM TO BE REPLACED BY CMS -->
                        <ul class="program flow">
                            {
                                program?.piece?.map(({ name, composer }) => {
                                    return (
                                        <li>
                                            <span>{name}</span>
                                            <span>{composer}</span>
                                        </li>
                                    );
                                })
                            }
                        </ul>
                    </div>
                </article>
            </div>
        </section>

        <!-- Watch and Listen -->
        {
            youtubeVideo && (
                <DividerLayout
                    dividerTopFileName="dividers/tear-top"
                    dividerBottomFileName="dividers/tear-bottom"
                    bgColorBottom={guests.length < 1 ? null : "beige"}
                    color="brand-primary"
                    class="video"
                >
                    <Video url={youtubeVideo?.url} piece={youtubeVideo?.piece} />
                </DividerLayout>
            )
        }

        <!-- FEATURED GUESTS -->
        {guests && guests.length > 0 && <FeaturedGuestsLayout guests={guests} />}

        <!-- NEWSLETTER -->
        <Newsletter class="newsletter" extraPadding={guests.length < 1 ? "top" : null} />
    </main>
</PageLayout>

<style lang="scss">
    @use "@styles/partials/abstracts/mixins" as *;

    // EVENT INFO: Poster and Text

    .event__info {
        display: grid;
        grid-template-columns: minmax(400px, 60%) minmax(300px, 550px);
        gap: var(--spc-med);
        margin-block-start: clamp(-4rem, -5.909vw + 0.727rem, -0.75rem);
        padding-block-end: var(--spc-xl);

        &__poster {
            grid-area: 1 / 2;
            display: grid;
            img {
                object-fit: contain;
                object-position: top;
                width: 100%;
                height: fit-content;
                position: sticky;
                top: var(--spc-med);
                box-shadow: 5px 4px 3.3px 0px rgba(0, 0, 0, 0.25);
            }
        }

        &__text {
            grid-area: 1 / 1;
            display: grid;
            gap: var(--spc-lg);

            // TEXT
            &__details {
                background-color: var(--clr-brand-primary);
                color: var(--clr-white);
                padding: 20px;
                display: grid;
                gap: var(--spc-sm);
                grid-template-columns: repeat(2, auto);

                display: flex;
                justify-content: space-between;
                flex-wrap: wrap;

                .details {
                    display: grid;
                    height: min-content;
                    gap: var(--spc-sm);
                    flex: 6 1 300px;
                    &__item {
                        display: flex;
                        align-items: center;
                        gap: var(--spc-xs);
                        width: fit-content;
                    }
                }

                .cta {
                    flex: 1 180px;
                    align-self: end;
                    font-size: var(--font-sz-400);
                }

                a {
                }
                [data-icon] {
                    font-size: 20px;
                }
            }

            // Program
            &__program {
                max-width: 70ch;

                .program {
                    margin-block-start: var(--spc-med);
                }
                li {
                    display: flex;
                    justify-content: space-between;
                }
                span:nth-child(2) {
                    text-align: right;
                }
            }
        }
    }

    @include responsive-style(tablet) {
        .event__info {
            grid-template-columns: 1fr;
            grid-template-rows: auto;
            gap: var(--spc-lg);

            &__poster {
                grid-area: 1 / 1;
                width: 100%;
                max-width: 400px;
                justify-self: center;

                img {
                }
            }

            &__text {
                grid-area: 2 / 1;
            }
        }
    }

    @include responsive-style(mobile) {
        .event__info {
            &__poster {
                max-width: 300px;
            }

            &__text {
                gap: var(--spc-med);
            }
        }
    }

    // NEWSLETTER
    .video + .newsletter {
        --_overlap: calc(#{rem(40)} * -1);

        margin-block-start: var(--_overlap);
        @include responsive-style(tablet) {
            --_overlap: calc(#{rem(20)} * -1);
        }
    }
</style>
