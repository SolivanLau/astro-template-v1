---
export const prerender = false;
// Scripts
import cmsFetch from "src/assets/scripts/cms/cmsFetch";
import { getCurrentSeason, parseDate } from "src/assets/scripts/lib/time";
// Layouts
import PageLayout from "@layouts/PageLayout.astro";
import EventGallery from "@components/EventGallery.astro";
import Newsletter from "@components/Newsletter.astro";
//  Components
import Header from "@layouts/Header.astro";
import Title from "@components/Title.astro";
import Link from "@components/Link.astro";
// ASSETS
import bgHeader from "@images/events-bg.png";
interface EventDetails {
    date: string;
}
interface Event {
    details: EventDetails;
    title: string;
    slug: string;
}
// QUERY PARAMS
const queryParameters = {
    fields: ["title", "slug", "eventType"],
    populate: {
        poster: "*",
        details: {
            populate: "*",
        },
        seo: "*",
    },
};

// CMS PAGE QUERY
const pageQuery = await cmsFetch("events", queryParameters);

// GET CURRENT SEASON
const currentDate = new Date();
const { seasonStartYear, seasonEndYear, seasonStart } = getCurrentSeason(currentDate);

const fallbackSeo = {
    metaTitle: "Events | Toronto Wind Collective",
    metaDescription: `See the upcoming ${seasonStartYear}/${seasonEndYear} season for the Toronto Wind Collective, or revisit our past projects! Live performances, video premieres, and more!`,
};

// SORTED EVENTS -> DOM
let upcomingEvents = [];
let pastEvents = [];

if (pageQuery && pageQuery.length > 0) {
    // sanitize .attributes
    const events = pageQuery.map((event) => event.attributes);
    // ORGANIZE EVENTS BY PAST OR UPCOMING
    events.forEach((event) => {
        const eventDate = new Date(event.details.date);

        if (eventDate >= seasonStart) {
            upcomingEvents.push(event);
        }

        if (eventDate < currentDate) {
            pastEvents.push(event);
        }
    });

    // SORTING EACH LIST BY DATE
    upcomingEvents.sort(
        (a: Event, b: Event) =>
            parseDate(a.details.date).getTime() - parseDate(b.details.date).getTime(),
    );
    pastEvents.sort(
        (a: Event, b: Event) =>
            parseDate(b.details.date).getTime() - parseDate(a.details.date).getTime(),
    );
}
---

<PageLayout fallbackSeo={fallbackSeo} isTurnstile>
    <Header title="Concert & Events" backgroundImgPath={bgHeader} backgroundImgLoading="eager" />
    <main>
        <!-- CURRENT EVENTS -->
        <section class="wrapper section__padding--extra-top">
            <Title
                tagName="h2"
                topper={seasonStartYear + "/" + seasonEndYear.toString().slice(2) + " Season"}
            >
                Upcoming Concerts & Events
            </Title>

            {
                // pastEvents && pastEvents.length > 0 && <EventGallery events={pastEvents} />
                // CHANGE TO UPCOMING EVENTS FOR PRODUCTION
                upcomingEvents && upcomingEvents.length > 0 ? (
                    <EventGallery events={upcomingEvents} />
                ) : (
                    <div class="cta flow section__padding">
                        <p class="h6">
                            New events are coming soon - join our newsletter to be notified!
                        </p>
                        <Link url="#newsletter" type="button--primary">
                            Subscribe To Our Newsletter
                        </Link>
                    </div>
                )
            }
        </section>

        <!-- ALL EVENTS -->
        <section class="wrapper section__padding">
            <Title tagName="h2" topper="Our Projects">Past Concerts</Title>
            {
                // CHANGE TO UPCOMING EVENTS FOR PRODUCTION
                pastEvents && pastEvents.length > 0 && <EventGallery events={pastEvents} />
            }
        </section>

        <!-- NEWSLETTER -->
        <Newsletter id="newsletter" />
    </main>
</PageLayout>

<style lang="scss">
    .cta {
        text-align: center;
    }
</style>
