---
// CMS Scripts
import cmsFetch from "@assets/scripts/cms/cmsFetch";
import { getCurrentSeason, parseDate } from "@assets/scripts/lib/time";
import { formatTime, formatDate } from "@assets/scripts/lib/time";
import { generateGoogleMapsLink } from "@assets/scripts/lib/googleMaps";
// Layouts & Components
import PageLayout from "@layouts/PageLayout.astro";
import Header from "@layouts/Header.astro";
import Title from "@components/Title.astro";
import Newsletter from "@components/Newsletter.astro";
import Link from "@components/Link.astro";
import Picture from "astro/components/Picture.astro";
import { Icon } from "astro-icon/components";
// ASSETS
import bgHeader from "@images/events-bg.png";
interface EventDetails {
    date: string;
}
interface Event {
    attributes: {
        details: EventDetails;
        title: string;
        slug: string;
    };
}
// QUERY PARAMS
const queryParameters = {
    fields: ["title", "slug", "eventType"],
    populate: {
        poster: "*",
        details: {
            populate: "*",
        },
    },
};

export const prerender = false;
// CMS PAGE QUERY
const pageQuery = await cmsFetch("events", queryParameters);

// GET CURRENT SEASON
const currentDate = new Date();
const { seasonStartYear, seasonEndYear, seasonStart, seasonEnd } = getCurrentSeason(currentDate);

// SORTED EVENTS -> DOM
let upcomingEvents = [];
let pastEvents = [];

if (pageQuery && pageQuery.length > 0) {
    // ORGANIZE EVENTS BY PAST OR UPCOMING
    pageQuery.forEach((event) => {
        const eventDate = new Date(event.attributes.details.date);

        if (eventDate >= seasonStart) {
            upcomingEvents.push(event);
        }

        if (eventDate < currentDate) {
            pastEvents.push(event);
        }
    });

    // SORTING EACH LIST BY DATE
    upcomingEvents.sort(
        (a: Event, b: Event) =>
            parseDate(a.attributes.details.date).getTime() -
            parseDate(b.attributes.details.date).getTime(),
    );
    pastEvents.sort(
        (a: Event, b: Event) =>
            parseDate(b.attributes.details.date).getTime() -
            parseDate(a.attributes.details.date).getTime(),
    );
}
---

<PageLayout isTurnstile>
    <Header title="Concert & Events" backgroundImgPath={bgHeader} />
    <main>
        <!-- CURRENT EVENTS -->
        <section class="wrapper section__padding--extra-top">
            <Title
                tagName="h2"
                topper={seasonStartYear + "/" + seasonEndYear.toString().slice(2) + " Season"}
            >
                Upcoming Concerts & Events
            </Title>
            {
                // CHANGE TO UPCOMING EVENTS FOR PRODUCTION
                pastEvents && pastEvents.length > 0 && (
                    <ul class="events__list">
                        {pastEvents.map((event) => {
                            const { title, slug, poster, eventType, details } =
                                event.attributes || {};

                            return (
                                <li class="events__item">
                                    {/* POSTER */}
                                    <Link url={`/events/${slug}`}>
                                        <Picture
                                            src={poster.data.attributes.url}
                                            alt={title}
                                            width={400}
                                            height={533.33}
                                            class="events__img"
                                        />
                                    </Link>
                                    <h3 class="h5 events__title">{title}</h3>
                                    {/* DETAILS */}
                                    <ul class="events__info">
                                        {/* EVENT TYPE */}
                                        <li class="events__detail">
                                            {eventType === "concert" ? (
                                                <>
                                                    <Icon name={"ticket"} class="events__icon" />
                                                    <p>Live Concert</p>
                                                </>
                                            ) : (
                                                <>
                                                    <Icon name={"video"} />
                                                    <p>Video Premiere</p>
                                                </>
                                            )}
                                        </li>
                                        {/* DATE AND TIME */}
                                        <li class="events__detail">
                                            <Icon name="calendar-filled" class="events__icon" />
                                            <time>
                                                {formatDate(details.date, "short")}
                                                {details.startTime &&
                                                    ` | ${formatTime(details.startTime)}`}
                                            </time>
                                        </li>

                                        {/* LOCATION */}
                                        <li>
                                            <Link
                                                class="events__detail"
                                                url={generateGoogleMapsLink(details.location)}
                                                isLinkExternal
                                            >
                                                <Icon name="location-filled" class="events__icon" />
                                                <address>
                                                    {details.location.addressLineOne},
                                                    {details.location.city}
                                                </address>
                                            </Link>
                                        </li>
                                    </ul>

                                    {/* CTA */}
                                    <Link
                                        url={`/events/${slug}`}
                                        type="button--primary"
                                        class="events__cta"
                                    >
                                        Learn More
                                    </Link>
                                </li>
                            );
                        })}
                    </ul>
                )
            }
        </section>

        <!-- ALL EVENTS -->
        <section class="wrapper section__padding">
            <Title tagName="h2" topper="Our Projects">Past Concerts</Title>
            {
                // ALL Events
                pastEvents && pastEvents.length > 0 && (
                    <ul class="events__list">
                        {pastEvents.map((event) => {
                            const { title, slug, poster, eventType, details } =
                                event.attributes || {};

                            return (
                                <li class="events__item">
                                    {/* POSTER */}
                                    <Link url={`/events/${slug}`}>
                                        <Picture
                                            src={poster.data.attributes.url}
                                            alt={title}
                                            width={400}
                                            height={533.33}
                                            class="events__img"
                                        />
                                    </Link>
                                    <h3 class="h5 events__title">{title}</h3>
                                    {/* DETAILS */}
                                    <ul class="events__info">
                                        {/* EVENT TYPE */}
                                        <li class="events__detail">
                                            {eventType === "concert" ? (
                                                <>
                                                    <Icon name={"ticket"} class="events__icon" />
                                                    <p>Live Concert</p>
                                                </>
                                            ) : (
                                                <>
                                                    <Icon name={"video"} />
                                                    <p>Video Premiere</p>
                                                </>
                                            )}
                                        </li>
                                        {/* DATE AND TIME */}
                                        <li class="events__detail">
                                            <Icon name="calendar-filled" class="events__icon" />
                                            <time>
                                                {formatDate(details.date, "short")}
                                                {details.startTime &&
                                                    ` | ${formatTime(details.startTime)}`}
                                            </time>
                                        </li>

                                        {/* LOCATION */}
                                        <li>
                                            <Link
                                                class="events__detail"
                                                url={generateGoogleMapsLink(details.location)}
                                                isLinkExternal
                                            >
                                                <Icon name="location-filled" class="events__icon" />
                                                <address>
                                                    {details.location.addressLineOne},
                                                    {details.location.city}
                                                </address>
                                            </Link>
                                        </li>
                                    </ul>

                                    {/* CTA */}
                                    <Link
                                        url={`/events/${slug}`}
                                        type="button--primary"
                                        class="events__cta"
                                    >
                                        Learn More
                                    </Link>
                                </li>
                            );
                        })}
                    </ul>
                )
            }
        </section>

        <!-- NEWSLETTER -->
        <Newsletter />
    </main>
</PageLayout>

<style lang="scss">
    @use "@styles/partials/abstracts/mixins" as *;

    .events__list {
        padding-block: var(--spc-lg);
        display: grid;
        gap: var(--spc-lg);
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        place-items: start;

        // @include responsive-style(675) {
        //     grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        // }
    }
    .events__item {
        width: 100%;
        display: grid;
        grid-template-rows: subgrid;
        grid-row: span 4;
        justify-content: center;
        gap: var(--spc-sm);

        @include responsive-style(mobile) {
            justify-self: center;
            grid-template-rows: auto;
            width: 100%;
            max-width: 300px;
        }
    }
    .events__img {
        height: fit-content;
        @include responsive-style(mobile) {
            width: 100%;
            max-width: 300px;
            margin-inline: auto;
        }
    }

    .events__title {
        width: 100%;
        align-self: start;
    }
    .events__info {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: var(--spc-xs);
    }
    .events__detail {
        display: flex;
        gap: var(--spc-xs);
        align-items: center;
        width: fit-content;
    }

    .events__icon {
        font-size: 25px;
        color: var(--clr-brand-primary);
    }

    .events__cta {
        width: 100%;
    }
</style>
