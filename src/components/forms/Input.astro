---
interface Props {
    inputType?:
        | "button"
        | "checkbox"
        | "color"
        | "date"
        | "datetime-local"
        | "email"
        | "file"
        | "hidden"
        | "image"
        | "month"
        | "number"
        | "password"
        | "radio"
        | "range"
        | "reset"
        | "search"
        | "submit"
        | "tel"
        | "text"
        | "time"
        | "url"
        | "week";
    textarea?: boolean;
    id: string;
    name: string;
    [key: string]: any;
}

const { inputType, textarea, id, name, ...rest } = Astro.props as Props;
---

<div class="form-input">
    <label class={textarea && "textarea"} for={id}>{name}</label>
    {
        textarea ? (
            <textarea name={id} id={id} {...rest} />
        ) : (
            <input type={inputType} name={id} id={id} {...rest} />
        )
    }
</div>

<style lang="scss">
    .form-input {
        position: relative;
        min-width: 0;
    }

    label,
    input {
        cursor: text;
    }

    label {
        min-width: 0;
        position: absolute;
        top: 50%;
        transform: translate(0, -50%);
        padding: 0 12px;
        font-weight: 700;
        transition: all 0.2s ease-in-out;

        &.textarea {
            top: 20px;
        }
    }

    input,
    textarea {
        width: 100%;
        border-radius: 0;
        padding: 16px 12px 4px;
        border: 2px solid hsla(0, 0%, 10%, 0.37);
    }

    textarea {
        resize: vertical;
        min-height: 250px;
    }
    // Label Input animation
    input:focus + label,
    .form-input:focus-within label,
    .input__active {
        top: 22%;
        font-size: 16px;

        &.textarea {
            top: 10px;
        }
    }
</style>

<script>
    const inputs = document.querySelectorAll(".form-input input");
    const textBasedInputTypes = ["text", "email", "password", "tel", "url", "search"];

    inputs.forEach((input) => {
        const inputElement = input as HTMLInputElement;
        const label = input.previousElementSibling as HTMLLabelElement;

        // Check if input type is one of the text-based input types
        if (textBasedInputTypes.includes(inputElement.type)) {
            // focus
            inputElement.addEventListener("focus", () => {
                label.classList.add("input__active");
            });
            // blur
            inputElement.addEventListener("blur", () => {
                if (inputElement.value !== "") {
                    label.classList.add("input__active");
                } else {
                    label.classList.remove("input__active");
                }
            });

            // remove all input__active class when form is submitted
            inputElement.form?.addEventListener("submit", () => {
                if (inputElement.value !== "") {
                    setTimeout(() => {
                        label.classList.remove("input__active");
                    }, 1200);
                }
            });
        }
    });
</script>
