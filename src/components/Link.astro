---
interface Props {
    url: string;
    isLinkExternal?: boolean;
    class?: string;
    type?:
        | "text--dark"
        | "text--dark-visible"
        | "text--light"
        | "text--light-visible"
        | "button--primary"
        | "button--secondary"
        | "button--secondary-white";
}

const { url, isLinkExternal, type, class: className, ...rest } = Astro.props;

const currentUrl = Astro.url.pathname;
// if type is button, add global button class
const classTypes = type && type.includes("button") ? `button ${type}` : type;
---

<a
    href={url}
    target={isLinkExternal ? "_blank" : null}
    rel={isLinkExternal ? "noopener noreferrer" : null}
    aria-current={currentUrl === url ? "page" : null}
    {...rest}
    class:list={[classTypes, className]}
>
    <slot />
</a>

<style lang="scss">
    @use "@styles/partials/abstracts/mixins" as *;

    a {
        text-decoration: none;
        transition: all 0.2s ease;
    }

    .text--light {
        color: var(--clr-brand-primary);
        font-weight: 700;

        &:hover,
        &:focus {
            filter: brightness(110%);
        }
    }

    .text--light-visible {
        color: var(--clr-brand-primary);
        font-weight: 700;
        text-decoration: underline;

        &:hover,
        &:focus {
            filter: brightness(110%);
        }
    }

    .text--dark {
        color: var(--clr-white);

        &:hover,
        &:focus {
            color: var(--clr-brand-accent);
        }
    }

    .text--dark-visible {
        color: var(--clr-white);
        text-decoration: underline;

        &:hover,
        &:focus {
            color: var(--clr-brand-accent);
        }
    }
</style>
